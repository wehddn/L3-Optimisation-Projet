@startuml

class Programme {
    Programme()
    void setAlgorithmeResolution(AlgorithmeResolution ar)
    int ajouterIngredient(String ingredient)
    void ajouterClient(Client c)
    List<String> getIngredientsSolution()
    void trouverSolution(String cheminFichier)
    String getIngredient(int indexIngredient)
    int getNbIngredients()
    List<Client> getClients()
}
Programme --"*" Client: clients
Programme --"1" List<String>: ingredients
Programme --"1" List<String>: ingredientsSolution
Programme --"1" GestionnaireFichier: gestionFichier
Programme --"1" AlgorithmeResolution: resolveur

class GestionnaireFichier {
    GestionnaireFichier(Programme p)
    void getDonnees(String nomFichier)
    void ecrireResultat(String nomFichier)
    int getInt(String texte, String message)
    void ajouterClient(int noClient, String ligne1, String ligne2)
}
GestionnaireFichier --"1" Programme

abstract class AlgorithmeResolution {
    AlgorithmeResolution(Programme p)
    void trouverSolution()
}
AlgorithmeResolution --"1" Programme: programme

class BranchAndBound extends AlgorithmeResolution {
    BranchAndBound(Programme p)
    void trouverSolution()
}

class ExplorationTotale extends AlgorithmeResolution {
    ExplorationTotale(Programme p)
    void trouverSolution()
}

class Genetique extends AlgorithmeResolution {
    int taillePopulation
    Genetique(Programme p, int taillePopulation)
    void trouverSolution()
    List<Recette> selection(List<Recette> recettes)
    List<Recette> croisement(List<Recette> recettesSelectionnes)
    List<Recette> mutation(List<Recette> recettesSelectionnes)
    Dict<Recette,int> evaluation(List<Recette>)
}


class Recette {
    List<int> indexIngredients
    Recette(Programme p, List<int> indexIngredients)
    Recette(Programme p, String codeIngredients)
    List<int> getIndexIngredients()
}
Recette --"1" Programme

class Client {
    int numero
    List<int> ingredientsAimes
    List<int> ingredientNonAimes
    Client(Programme p, int numero)
    void addIngredientAime(int indexIngredient)
    void addIngredientNonAime(int indexIngredient)
    booleen aime(int indexIngredient)
    booleen aimePas(int indexIngredient)
    booleen recetteAcceptable(Recette r)
}
Client --"1" Programme

@enduml